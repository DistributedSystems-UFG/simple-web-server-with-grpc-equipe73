# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import SensorService_pb2 as SensorService__pb2


class SensorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSensor = channel.unary_unary(
                '/Sensor_service.SensorService/CreateSensor',
                request_serializer=SensorService__pb2.SensorData.SerializeToString,
                response_deserializer=SensorService__pb2.StatusReply.FromString,
                )
        self.GetSensorDataFromdate = channel.unary_unary(
                '/Sensor_service.SensorService/GetSensorDataFromdate',
                request_serializer=SensorService__pb2.Sensordate.SerializeToString,
                response_deserializer=SensorService__pb2.SensorDataList.FromString,
                )
        self.GetSensorDataFromlocation = channel.unary_unary(
                '/Sensor_service.SensorService/GetSensorDataFromlocation',
                request_serializer=SensorService__pb2.Sensorlocation.SerializeToString,
                response_deserializer=SensorService__pb2.SensorDataList.FromString,
                )
        self.ListAllSensors = channel.unary_unary(
                '/Sensor_service.SensorService/ListAllSensors',
                request_serializer=SensorService__pb2.EmptyMessage.SerializeToString,
                response_deserializer=SensorService__pb2.SensorDataList.FromString,
                )


class SensorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateSensor(self, request, context):
        """Create an Sensor record
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSensorDataFromdate(self, request, context):
        """Get an SensorÂ´s data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSensorDataFromlocation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllSensors(self, request, context):
        """List all Sensors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSensor': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSensor,
                    request_deserializer=SensorService__pb2.SensorData.FromString,
                    response_serializer=SensorService__pb2.StatusReply.SerializeToString,
            ),
            'GetSensorDataFromdate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSensorDataFromdate,
                    request_deserializer=SensorService__pb2.Sensordate.FromString,
                    response_serializer=SensorService__pb2.SensorDataList.SerializeToString,
            ),
            'GetSensorDataFromlocation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSensorDataFromlocation,
                    request_deserializer=SensorService__pb2.Sensorlocation.FromString,
                    response_serializer=SensorService__pb2.SensorDataList.SerializeToString,
            ),
            'ListAllSensors': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllSensors,
                    request_deserializer=SensorService__pb2.EmptyMessage.FromString,
                    response_serializer=SensorService__pb2.SensorDataList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Sensor_service.SensorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SensorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sensor_service.SensorService/CreateSensor',
            SensorService__pb2.SensorData.SerializeToString,
            SensorService__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSensorDataFromdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sensor_service.SensorService/GetSensorDataFromdate',
            SensorService__pb2.Sensordate.SerializeToString,
            SensorService__pb2.SensorDataList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSensorDataFromlocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sensor_service.SensorService/GetSensorDataFromlocation',
            SensorService__pb2.Sensorlocation.SerializeToString,
            SensorService__pb2.SensorDataList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllSensors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sensor_service.SensorService/ListAllSensors',
            SensorService__pb2.EmptyMessage.SerializeToString,
            SensorService__pb2.SensorDataList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
